
/*
     ॐ त्र्यम्बकं यजामहे सुगन्धिं पुष्टिवर्धनम् |
     उर्वारुकमिव बन्धनान्मृत्योर्मुक्षीय माऽमृतात् ||
*/
 
#include <bits/stdc++.h>
 
using namespace std;
 
#define int            long long int
#define F              first
#define S              second
#define pb             push_back
#define si             set <int>
#define vi             vector <int>
#define pii            pair <int, int>
#define vpi            vector <pii>
#define vpp            vector <pair<int, pii>>
#define mii            map <int, int>
#define mpi            map <pii, int>
#define spi            set <pii>
#define endl           "\n"
#define sz(x)          ((int) x.size())
#define all(p)         p.begin(), p.end()
#define double         long double
#define que_max        priority_queue <int>
#define que_min        priority_queue <int, vi, greater<int>>
#define bug(...)       __f (#__VA_ARGS__, __VA_ARGS__)
#define print(a)       for(auto x : a) cout << x << " "; cout << endl
#define print1(a)      for(auto x : a) cout << x.F << " " << x.S << endl
#define print2(a,x,y)  for(int i = x; i < y; i++) cout<< a[i]<< " "; cout << endl
#define fast_io        ios_base::sync_with_stdio(false);cin.tie(NULL)
 
inline int power(int a, int b)
{
    int x = 1;
    while (b)
    {
        if (b & 1) x *= a;
        a *= a;
        b >>= 1;
    }
    return x;
}
 
template <typename Arg1>
void __f (const char* name, Arg1&& arg1) { cout << name << " : " << arg1 << endl; }
template <typename Arg1, typename... Args>
void __f (const char* names, Arg1&& arg1, Args&&... args)
{
    const char* comma = strchr (names + 1, ',');
    cout.write (names, comma - names) << " : " << arg1 << " | "; __f (comma + 1, args...);
}
 
 
const int INF = 1LL << 62;
 
 
class sgt{
public:
    int n;
    vi mp,p;
    vector<vi> mn;
 
    sgt(int _n){
        n=_n;
        int m=n*4+10;
        p.resize(n+1);
        mp.resize(m);
        mn.resize(2,vi(m,INF));
    }
 
    void pull(int node){
        mn[0][node]=min(mn[0][node*2],mn[0][node*2+1]);
        mn[1][node]=min(mn[1][node*2],mn[1][node*2+1]);
 
        // bug(node,mn[0][node],mn[1][node]);
    }
 
    void init(int node,int l,int r){
        // bug(node,l,r);
        if(l==r){
            cin >> p[l];
            mp[l]=node;
            mn[0][node]=p[l]+l; // store the right possible sum
            mn[1][node]=p[l]+(n-l+1); // store the left possible sum
            // bug(l,mn[0][node],mn[1][node]);
            // bug(node,mn[0][node],mn[1][node]);
            // bug(l,node);
 
            return;
        }
 
        int mid=l+(r-l)/2;
        init(node*2,l,mid);
        init(node*2+1,mid+1,r);
 
        pull(node);
    }
 
 
    void update(int k,int val){
        int node=mp[k];
        p[k]=val;
 
        mn[0][node]=val+k;
        mn[1][node]=val+(n-k+1);
 
        node >>= 1;
        while(node){
            pull(node);
            node >>= 1;
        }
    }
 
    int query(int t,int l,int r,int node,int lo,int hi){
 
        // bug(node,l,r);
 
        if(hi<l || r<lo){
            return INF;
        }else if(l<=lo && hi<=r){
            return mn[t][node];
        }
 
 
        int mid=(lo+hi)/2;
        int left=query(t,l,r,node*2,lo,mid);
        int right=query(t,l,r,node*2+1,mid+1,hi);
 
        // bug(node,l,r,left,right);
 
        return min(left,right);
    }
 
 
    void query(int k){
        int left=query(1,1,k,1,1,n);
        int right=query(0,k,n,1,1,n);
 
        // bug(k,left,right);
 
        left -= (n-k+1);
        right -= k;
 
        cout << min(left,right) << endl;
    }
 
};
 
 
void solve() {
    //code here
    // cout << "hello world" << endl;
 
    int n,q; 
    cin >> n >> q;
    // bug(n,q);
 
    sgt tree(n);
    // bug(tree.n);
 
    tree.init(1,1,n);
    // bug(tree.p.size(),tree.p[0],tree.mn.size(),tree.mn[0].size());
 
    int ch,a,b;
 
    while(q--){
        cin >> ch >> a;
 
        if(ch==1){
            cin >> b;
            tree.update(a,b);
        }else {
            tree.query(a);            
        }
        // bug(q,ch,a,b);
    }
}
 
void init_code(){
    fast_io;
 
    #ifndef ONLINE_JUDGE
        freopen("inputf.in", "r", stdin);
        freopen("outputf.in", "w", stdout);
    #endif
 
}
 
int32_t main()
{    
    init_code();
    clock_t z = clock();
 
    int t = 1;
    // cin >> t;
    while (t--) solve();
 
    cerr << "Run Time : " << ((double)(clock() - z) / CLOCKS_PER_SEC);
 
    return 0;
}
